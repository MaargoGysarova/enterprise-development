@page "/pharmacies"
@using PharmacyManagementSystem.Shared.Models
@using PharmacyManagementSystem.Client.Api
@inject Client ApiClient

<h3>Pharmacies</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
    </div>
}

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Address</th>
                    <th>Phone Number</th>
                    <th>Director</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pharmacy in pharmacies)
                {
                    <tr>
                        <td>@pharmacy.Name</td>
                        <td>@pharmacy.Address</td>
                        <td>@pharmacy.PhoneNumber</td>
                        <td>@pharmacy.DirectorFullName</td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-warning btn-sm" @onclick="() => ShowEditForm(pharmacy)">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeletePharmacy(pharmacy.PharmacyId)">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mt-3">
        <button class="btn btn-primary" @onclick="ShowAddForm">
            <i class="fas fa-plus"></i> Add New Pharmacy
        </button>
    </div>
}

@if (isEditing || isAdding)
{
    <div class="card mt-3">
        <div class="card-body">
            <h5 class="card-title">@(isEditing ? "Edit Pharmacy" : "Add New Pharmacy")</h5>
            <EditForm Model="@currentPharmacy" OnValidSubmit="SavePharmacy">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="currentPharmacy.Name" />
                    <ValidationMessage For="@(() => currentPharmacy.Name)" />
                </div>

                <div class="mb-3">
                    <label for="address" class="form-label">Address</label>
                    <InputText id="address" class="form-control" @bind-Value="currentPharmacy.Address" />
                    <ValidationMessage For="@(() => currentPharmacy.Address)" />
                </div>

                <div class="mb-3">
                    <label for="phoneNumber" class="form-label">Phone Number</label>
                    <InputText id="phoneNumber" class="form-control" @bind-Value="currentPharmacy.PhoneNumber" />
                    <ValidationMessage For="@(() => currentPharmacy.PhoneNumber)" />
                </div>

                <div class="mb-3">
                    <label for="directorFullName" class="form-label">Director Full Name</label>
                    <InputText id="directorFullName" class="form-control" @bind-Value="currentPharmacy.DirectorFullName" />
                    <ValidationMessage For="@(() => currentPharmacy.DirectorFullName)" />
                </div>

                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-success" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-1">Saving...</span>
                        }
                        else
                        {
                            <i class="fas fa-save"></i>
                            <span class="ms-1">Save</span>
                        }
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<PharmacyGetDto> pharmacies = new();
    private PharmacyPostDto currentPharmacy = new();
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isEditing = false;
    private bool isAdding = false;
    private int? currentPharmacyId;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadPharmacies();
    }

    private async Task LoadPharmacies()
    {
        try
        {
            errorMessage = null;
            isLoading = true;
            pharmacies = (await ApiClient.PharmacyAllAsync()).ToList();
            Console.WriteLine($"Loaded {pharmacies.Count} pharmacies successfully");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load pharmacies: {ex.Message}";
            Console.WriteLine($"Error loading pharmacies: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowAddForm()
    {
        errorMessage = null;
        currentPharmacy = new PharmacyPostDto();
        currentPharmacyId = null;
        isAdding = true;
        isEditing = false;
    }

    private void ShowEditForm(PharmacyGetDto pharmacy)
    {
        errorMessage = null;
        currentPharmacy = new PharmacyPostDto
        {
            Name = pharmacy.Name,
            Address = pharmacy.Address,
            PhoneNumber = pharmacy.PhoneNumber,
            DirectorFullName = pharmacy.DirectorFullName
        };
        currentPharmacyId = pharmacy.PharmacyId;
        isEditing = true;
        isAdding = false;
    }

    private async Task SavePharmacy()
    {
        try
        {
            errorMessage = null;
            isSaving = true;

            if (isEditing && currentPharmacyId.HasValue)
            {
                await ApiClient.PharmacyPUTAsync(currentPharmacyId.Value, currentPharmacy);
            }
            else
            {
                try
                {
                    await ApiClient.PharmacyPOSTAsync(currentPharmacy);
                }
                catch (ApiException ex) when (ex.StatusCode == 201)
                {
                    // 201 Created is a success status, not an error
                    // Continue with normal flow
                }
            }

            await LoadPharmacies();
            CancelEdit();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to save pharmacy: {ex.Message}";
            Console.WriteLine($"Error saving pharmacy: {ex}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeletePharmacy(int id)
    {
        try
        {
            errorMessage = null;
            isLoading = true;
            await ApiClient.PharmacyDELETEAsync(id);
            await LoadPharmacies();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete pharmacy: {ex.Message}";
            Console.WriteLine($"Error deleting pharmacy: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CancelEdit()
    {
        errorMessage = null;
        currentPharmacy = new PharmacyPostDto();
        currentPharmacyId = null;
        isEditing = false;
        isAdding = false;
    }
}
