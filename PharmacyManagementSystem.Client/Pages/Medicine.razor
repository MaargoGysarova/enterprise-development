@page "/medicines"
@using PharmacyManagementSystem.Client.Api
@inject Client ApiClient

<h3>Medicines</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var medicine in medicines)
            {
                <tr>
                    <td>@medicine.Name</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => ShowEditForm(medicine)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteMedicine(medicine.MedicineId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="mt-3">
    <button class="btn btn-primary" @onclick="ShowAddForm">Add New Medicine</button>
</div>

@if (isEditing || isAdding)
{
    <div class="card mt-3">
        <div class="card-body">
            <h5>@(isEditing ? "Edit Medicine" : "Add Medicine")</h5>
            <EditForm Model="@currentMedicine" OnValidSubmit="SaveMedicine">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="name">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="currentMedicine.Name" />
                </div>
                <button type="submit" class="btn btn-success">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<MedicineGetDto> medicines = new();
    private MedicinePostDto currentMedicine = new();
    private bool isLoading = true;
    private bool isEditing = false;
    private bool isAdding = false;
    private int? currentMedicineId;

    protected override async Task OnInitializedAsync()
    {
        await LoadMedicines();
    }

    private async Task LoadMedicines()
    {
        try
        {
            isLoading = true;
            medicines = (await ApiClient.MedicineAllAsync()).ToList();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAddForm()
    {
        currentMedicine = new MedicinePostDto();
        currentMedicineId = null;
        isAdding = true;
        isEditing = false;
    }

    private void ShowEditForm(MedicineGetDto medicine)
    {
        currentMedicine = new MedicinePostDto
        {
            Name = medicine.Name
        };
        currentMedicineId = medicine.MedicineId;
        isEditing = true;
        isAdding = false;
    }

    private async Task SaveMedicine()
    {
        try
        {
            if (isEditing && currentMedicineId.HasValue)
            {
                await ApiClient.MedicinePUTAsync(currentMedicineId.Value, currentMedicine);
            }
            else
            {
                await ApiClient.MedicinePOSTAsync(currentMedicine);
            }

            await LoadMedicines();
            CancelEdit();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine(ex);
        }
    }

    private async Task DeleteMedicine(int id)
    {
        try
        {
            await ApiClient.MedicineDELETEAsync(id);
            await LoadMedicines();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine(ex);
        }
    }

    private void CancelEdit()
    {
        currentMedicine = new MedicinePostDto();
        currentMedicineId = null;
        isEditing = false;
        isAdding = false;
    }
}
